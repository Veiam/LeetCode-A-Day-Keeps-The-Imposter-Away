// Given a word, write a function to generate all of its unique generalized abbreviations.
// A generalized abbreviation of a word can be generated by replacing each substring of the word with the count of characters in the substring.
// Take the example of “ab” which has four substrings: “”, “a”, “b”, and “ab”.
// After replacing these substrings in the actual word by the count of characters,
// we get all the generalized abbreviations: “ab”, “1b”, “a1”, and “2”.
class AbbreviatedWord {
    constructor(str, start, count) {
        this.str = str;
        this.start = start;
        this.count = count;
    }
}


function generate_generalized_abbreviation(word) {
    let wordLen = word.length,
        result = [];
    const queue = [];
    // Start with an empty word: “”
    queue.push(new AbbreviatedWord('', 0, 0));
    while (queue.length > 0) {
        const abWord = queue.shift();

        // one abbreviation for the whole word
        if (abWord.start === wordLen) {
            if (abWord.count !== 0) {
                abWord.str += abWord.count;
            }
            result.push(abWord.str);
        }
        // At every step, we will take all the combinations from the previous step and apply the two abbreviation rules to the next character.
        // Abbreviate the current character, or
        // Add the current character to the output and skip the abbreviation.
        else {
            // continue abbreviating by incrementing the current abbreviation count
            queue.push(new AbbreviatedWord(abWord.str, abWord.start + 1, abWord.count + 1));

            // restart abbreviating, append the count and the current character to the string
            if (abWord.count !== 0) {
                abWord.str += abWord.count;
            }

            // Add the current character to the output and skip the abbreviation.
            let newWord = abWord.str + word[abWord.start]
            queue.push(new AbbreviatedWord(newWord, abWord.start + 1, 0));
        }
    }
    return result;
}


console.log(`Generalized abbreviation are: ${generate_generalized_abbreviation('BAT')}`);
console.log(`Generalized abbreviation are: ${generate_generalized_abbreviation('code')}`);

function generate_generalized_abbreviation(word) {
    const result = [];
    generate_abbreviation_recursive(word, '', 0, 0, result);
    return result;
}


function generate_abbreviation_recursive(word, abWord, start, count, result) {
    if (start === word.length) {
        if (count !== 0) {
            abWord += count;
        }
        result.push(abWord);
    } else {
        // continue abbreviating by incrementing the current abbreviation count
        generate_abbreviation_recursive(word, abWord, start + 1, count + 1, result);

        // restart abbreviating, append the count and the current character to the string
        if (count !== 0) {
            abWord += count;
        }
        const newWord = abWord + word[start];
        generate_abbreviation_recursive(word, newWord, start + 1, 0, result);
    }
}


console.log(`Generalized abbreviation are: ${generate_generalized_abbreviation('BAT')}`);
console.log(`Generalized abbreviation are: ${generate_generalized_abbreviation('code')}`);